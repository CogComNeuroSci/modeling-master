#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Nov 2, 2018

@author: tom verguts
pics and tables from chapter 6
fig 6.4 is generated by a separate file (ch6_curve.py)
table 6.2 also (by ch6_recovery.py)
"""

import numpy as np
import matplotlib.pyplot as plt

#%% fig 6.2a: taking logs doesn't change optimum
x = np.linspace(-3, 3, 50)
y1 = x**2
y2 = np.log(y1)

fig, axs = plt.subplots(nrows = 1, ncols = 2)

axs[0].plot(x, y1, color = "black")
axs[0].set_title("$y = x^2$")
axs[1].plot(x, y2, color = "black")
axs[1].set_title("$y = log(x^2)$")

#%% fig 6.2b log likelihood: dependence on data size
logL_range = 100
n = [[7, 3], [70, 30]]
fig, axs = plt.subplots(nrows = 1, ncols = 2)

p = np.linspace(0+1/50, 1-1/50, 50)
for loop in range(2):
    logL = n[loop][0]*np.log(p) + n[loop][1]*np.log(1-p)
    av = np.mean(logL)
    axs[loop].plot(p, logL, color = "black")
    axs[loop].set_ylim(av-logL_range/2, av+logL_range/2)
    axs[loop].set_title("{} data points".format(n[loop][0]+n[loop][1]))

#%% fig 6.x: to illustrate grid search (didn't make it to final version of book)
x = np.linspace(0, 1, 10)
y = np.linspace(0, 5, 10)

plt.figure()
plt.xticks(x)
plt.yticks(y)
plt.xlabel('Parameter 1')
plt.ylabel('Parameter 2')
plt.grid(True)

#%% table 6.1: illustration of the softmax function
w = np.array([2, 0.2, 0.5, 1])
gamma = [0.2, 2] # low and high value
for gamma_loop in gamma:
    denominator = np.sum(np.exp(gamma_loop*w))
    print( np.exp(gamma_loop*w)/denominator )
    
          format(loop+1,lik1, lik2, aic1, aic2, bic1, bic2, lik1_new, lik2_new))